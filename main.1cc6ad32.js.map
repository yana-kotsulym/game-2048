{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","column","count","tableBody","document","querySelector","winMessage","startMessage","loseMessage","button","gameScore","setGame","innerHTML","map","row","rowIndex","item","columnIndex","join","setTwoOrFour","updateTile","tile","num","innerText","classList","value","add","toString","handleGame","e","key","canMoveLeft","moveLeft","canMoveRight","moveRight","canMoveUp","moveUp","canMoveDown","moveDown","startGame","gameOver","remove","removeEventListener","winGame","textContent","restartGame","addEventListener","filterZero","filter","move","currentRow","i","length","push","forEach","cell","cellIndex","getElementById","reverse","c","r","hasEmptyTile","found","Math","floor","random","randomNumber","some","window","onload","target","contains"],"mappings":"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","file":"main.1cc6ad32.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst column = 4;\nlet count = 0;\n\nconst tableBody = document.querySelector('tbody');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\n\nwindow.onload = function() {\n  setGame();\n};\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  tableBody.innerHTML = board.map((row, rowIndex) => `\n    <tr>\n      ${row.map((item, columnIndex) => `\n        <td\n          class=\"field-cell ${item > 0 ? `field-cell--${item}` : ''}\"\n          id=\"${rowIndex}-${columnIndex}\">\n          ${item > 0 ? item : ''}\n        </td>\n      `).join('')}\n    </tr>\n  `).join('');\n\n  setTwoOrFour();\n  setTwoOrFour();\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\ndocument.addEventListener('keydown', handleGame);\n\nbutton.addEventListener('click', (e) => {\n  if (e.target.classList.contains('restart')) {\n    restartGame();\n  } else if (e.target.classList.contains('start')) {\n    startGame();\n  }\n});\n\nfunction handleGame(e) {\n  switch (e.key) {\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        return;\n      }\n      moveLeft();\n      setTwoOrFour();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        return;\n      }\n      moveRight();\n      setTwoOrFour();\n      break;\n\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        return;\n      }\n      moveUp();\n      setTwoOrFour();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        return;\n      }\n      moveDown();\n      setTwoOrFour();\n      break;\n\n    default:\n      return;\n  }\n\n  count++;\n\n  if (count > 0) {\n    startGame();\n  }\n\n  if (gameOver()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleGame);\n  }\n\n  if (winGame()) {\n    winMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleGame);\n  }\n}\n\nfunction startGame() {\n  startMessage.classList.add('hidden');\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n}\n\nfunction restartGame() {\n  count = 0;\n  score = 0;\n  gameScore.innerText = score;\n\n  setGame();\n  startGame();\n\n  document.addEventListener('keydown', handleGame);\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction move(row) {\n  let currentRow = filterZero(row);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow[i + 1] = 0;\n      score += currentRow[i];\n      gameScore.innerText = score;\n    }\n  }\n\n  currentRow = filterZero(currentRow);\n\n  while (currentRow.length < column) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n}\n\nfunction moveLeft() {\n  board = board.map((row) => move(row));\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const tile = document.getElementById(`${rowIndex}-${cellIndex}`);\n\n      updateTile(tile, cell);\n    });\n  });\n}\n\nfunction moveRight() {\n  board = board.map((row) => move(row.reverse()).reverse());\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const tile = document.getElementById(`${rowIndex}-${cellIndex}`);\n\n      updateTile(tile, cell);\n    });\n  });\n}\n\nfunction moveUp() {\n  for (let c = 0; c < column; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = move(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < column; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = move(row.reverse()).reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction setTwoOrFour() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * column);\n\n    if (board[r][c] === 0) {\n      const randomNumber = Math.random() > 0.9 ? 4 : 2;\n\n      board[r][c] = randomNumber;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = randomNumber;\n      tile.classList.add(`field-cell--${randomNumber}`);\n      found = true;\n    }\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let i = 0; i < rows; i++) {\n    if (board[i].some(cell => cell === 0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction gameOver() {\n  if (!canMoveLeft() && !canMoveRight() && !canMoveUp() && !canMoveDown()) {\n    return true;\n  }\n}\n\nfunction winGame() {\n  for (let i = 0; i < rows; i++) {\n    if (board[i].some(cell => cell === 2048)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction canMoveLeft() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    for (let c = column - 1; c > 0; c--) {\n      if (row[c] !== 0 && (row[c - 1] === 0 || row[c] === row[c - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMoveRight() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r].reverse();\n\n    for (let c = column - 1; c > 0; c--) {\n      if (row[c] !== 0 && (row[c - 1] === 0 || row[c] === row[c - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMoveUp() {\n  for (let i = 0; i < column; i++) {\n    const row = [board[0][i], board[1][i], board[2][i], board[3][i]];\n\n    for (let c = column - 1; c > 0; c--) {\n      if (row[c] !== 0 && (row[c - 1] === 0 || row[c] === row[c - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMoveDown() {\n  for (let i = 0; i < column; i++) {\n    const row = [board[0][i], board[1][i], board[2][i], board[3][i]].reverse();\n\n    for (let c = column - 1; c > 0; c--) {\n      if (row[c] !== 0 && (row[c - 1] === 0 || row[c] === row[c - 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}